FORMAT: 1A
HOST: https://token-eth-service.herokuapp.com

# Token Ethereum Service

This service is a light service that sits ontop of a standard ethereum node and provides helper functions for creating and sending transactions.

## Transaction Skeleton [/v1/tx/skel]

This endpoint creates an unsigned transaction and returns the rlp encoded data back to the caller.

Optionally the caller can provide a `none`, `gas` and `gasPrice` values to override the defaults.

Note: A `nonce` for the transaction is picked based on the next available nonce for the given source address,
so it is important that the same address is used to sign the returned skeleton.

### Create a new unsigned transaction [POST]

+ Request (application/json)

        {
            "from": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "to": "0xdb089a4f9a8c5f17040b4fc51647e942b5fc601d",
            "value": 1000000000000000000
        }

+ Request (application/json)

        {
            "from": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "to": "0xdb089a4f9a8c5f17040b4fc51647e942b5fc601d",
            "gas": 21000,
            "gasPrice": 20000000000,
            "nonce":
            "value": 1000000000000000000
        }

+ Response 200 (application/json)

        {
            "tx": "0xec831002e88504a817c80082520894db089a4f9a8c5f17040b4fc51647e942b5fc601d880de0b6b3a764000080"
        }

## Send Transaction [/v1/tx]

### Send transaction [POST]

This has two different options. It either accepts the same transaction hash returned by the skeleton generation endpoint as well as the signature to authorise that, or it can simply accept an rlp encoded signed transaction. Additionally a request can be signed, this is required if it's desired that the recipient of the transaction should know who (i.e. which token identity) the transaction has originated from.

+ Request (application/json)

        {
            "tx": "0xec831002e88504a817c80082520894db089a4f9a8c5f17040b4fc51647e942b5fc601d880de0b6b3a764000080",
            "signature": "0x09dd3b801d027a8e3b53b2f7d5b6753e5cd785c08d2d5bea41ed6226bddca9e32a5a35544647c1f9441ea888fa41dac20fc9db0805a1f94f3124a3e132eb7b8001"
        }

+ Request (application/json)
        {
            "tx": "0xf86f831002e88504a817c80082520894db089a4f9a8c5f17040b4fc51647e942b5fc601d880de0b6b3a7640000801ca009dd3b801d027a8e3b53b2f7d5b6753e5cd785c08d2d5bea41ed6226bddca9e3a02a5a35544647c1f9441ea888fa41dac20fc9db0805a1f94f3124a3e132eb7b80"

        }

+ Request (application/json)
        {
            "payload": {
                "tx": "0xf86f831002e88504a817c80082520894db089a4f9a8c5f17040b4fc51647e942b5fc601d880de0b6b3a7640000801ca009dd3b801d027a8e3b53b2f7d5b6753e5cd785c08d2d5bea41ed6226bddca9e3a02a5a35544647c1f9441ea888fa41dac20fc9db0805a1f94f3124a3e132eb7b80",
                "timestamp": 1480077346,
            },
            "address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "signature": "0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801"
        }

+ Response 200 (application/json)

        {
            "tx_hash": "0xfde977a1ebd89cb3d0f17ce85efedca087788ddb50576c9b976c46f2eba21465"
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "insufficient_funds",
                    "message": "Insufficient Funds"
                }
            ]
        }

## Query Transactions [/v1/tx/{tx_hash}]

### Get Transacion [GET]

Returns the details of a transaction.

+ Response 200 (application/json)

        {
            "tx": {
                "transactionIndex": "0x00",
                "raw": "0xf86c831000008504a817c80082520894056db290f8ba3250ca64a45d16284d04bc6f5fbf8502540be400801ca0114655db4898a6580f0abfc53fc0c0a88110724abf8d41f2abf206c69d7d4c82a01ed2cdf6939484ef6aebc39ce5662363b82140106bbc374a0f1381b6948214b0",
                "input": "0x",
                "nonce": "0x100000",
                "gas": "0x5208",
                "blockHash": "0xfc6e2a636c945fb3eade5d180e99bc1969480b522c2dde5727677dbac9594863",
                "value": "0x02540be400",
                "gasPrice": "0x04a817c800",
                "creates": None,
                "blockNumber": "0x01",
                "to": "0x056db290f8ba3250ca64a45d16284d04bc6f5fbf",
                "from": "0xde3d2d9dd52ea80f7799ef4791063a5458d13913",
                "hash": "0x2f321aa116146a9bc62b61c76508295f708f42d56340c9e613ebfc27e33f240c"
            }
        }

+ Response 404 (application/json)

        {
            "tx": null
        }

## Get Address Balance [v1/balance/{address}]

### Get Balance [GET]

Returns the balance of the given address. Two values are returned, `confirmed_balance` is the balance of the address that has been confirmed by the ethereum network. `unconfirmed_balance` is the confirmed balance plus or minus the value (as well as estimated fees for outgoing transactions) for any pending transactions that have yet to be confirmed by the network.

+ Response 200 (application/json)

        {
            "confirmed_balance": 761751855997712,
            "unconfirmed_balance": 761751855997712
        }

## Register for transaction notifications [v1/register]

### Register [POST]

Register that a user wants to receive notifications of transactions to and from specific ethereum addresses. This creates a link between specific addresses and a token identity. This request must be signed to prove ownership of the token identity.

+ Request (application/json)

        {
            "payload": {
                "addresses": ["0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a", "0x056db290f8ba3250ca64a45d16284d04bc6f5fbf"]
                "timestamp": 1480077346,
            },
            "address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "signature": "0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801"
        }

+ Response 204

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_timestamp",
                    "message": "The difference between the timestamp and the current time is too large"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }

## Deregister addresses from transaction notifications [v1/deregister]

### Deregister [POST]

Removes the given addresses from the list of addresses that the user will receive notifications for

+ Request (application/json)

        {
            "payload": {
                "addresses": ["0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a", "0x056db290f8ba3250ca64a45d16284d04bc6f5fbf"]
                "timestamp": 1480077346,
            },
            "address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "signature": "0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801"
        }

+ Response 204

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_timestamp",
                    "message": "The difference between the timestamp and the current time is too large"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }

## Register for apple push notifications [v1/apn/register]

### Register [POST]

Register for APN push notifications. This links a token identity to a push notification token. This will enable push notifications for any of the addresses the token identity has registered to receive transaction notifications from.

+ Request (application/json)

        {
            "payload": {
                "registration_id": "64be4fe95ba967bb533f0c240325942b9e1f881b5cd2982568a305dd4933e0bd",
                "timestamp": 1480077346,
            },
            "address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "signature": "0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801"
        }

+ Response 204

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_timestamp",
                    "message": "The difference between the timestamp and the current time is too large"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }

## Register for google push notifications [v1/gcm/register]

### Register [POST]

Register for Google Cloud Messaging push notifications. This links a token identity to a push notification token. This will enable push notifications for any of the addresses the token identity has registered to receive transaction notifications from.

+ Request (application/json)

        {
            "payload": {
                "registration_id": "64be4fe95ba967bb533f0c240325942b9e1f881b5cd2982568a305dd4933e0bd",
                "timestamp": 1480077346,
            },
            "address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "signature": "0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801"
        }

+ Response 204

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_timestamp",
                    "message": "The difference between the timestamp and the current time is too large"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }
